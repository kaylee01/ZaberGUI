import PySimpleGUI as sg
from zaber_motion import Library, Units
from zaber_motion.ascii import Connection

Library.enable_device_db_store()

import sys
import glob
import serial

sg.theme('Reddit')

# max postions in mm
MAX_X = 151.49909375
MAX_Y = 151.49909375
MAX_Z = 40.000047

# move distance in mm
DIST = 15




with Connection.open_serial_port("/dev/cu.usbmodem1101") as connection:
    device_list = connection.detect_devices() 
    xy_device = device_list[0]
    z_device = device_list[1]

    axis1 = xy_device.get_axis(1)  # x ?
    axis2 = xy_device.get_axis(2)  # y ?
    axis3 = z_device.get_axis(1)

    def home_all():
        for device in device_list:
            print("Homing all axes of device with address {}.".format(device.device_address))
            device.all_axes.home()
    
    def is_in_bounds_r(axis):
        if axis == axis1:
            max = MAX_X
        if axis == axis2:
            max = MAX_Y
        if axis == axis3:
            max = MAX_Z
        current_pos = axis.get_position(Units.LENGTH_MILLIMETRES)
        if current_pos + DIST - max >= 0:
            return False
        return True

    def is_in_bounds_l(axis):
        current_pos = axis.get_position(Units.LENGTH_MILLIMETRES)
        if current_pos - DIST >= 0:
            return True
        return False
    
    print(is_in_bounds_l(axis2))

    layout = [
    [
        sg.Text("X position:"),
        sg.Text("{:.2f} mm".format(axis1.get_position(Units.LENGTH_MILLIMETRES)),key="-CURRENTX-")
    ],
    [
        sg.Text("Y position:"),
        sg.Text("{:.2f} mm".format(axis2.get_position(Units.LENGTH_MILLIMETRES)),key="-CURRENTY-")
    ],
    [
        sg.Text("Z position:"),
        sg.Text("{:.2f} mm".format(axis3.get_position(Units.LENGTH_MILLIMETRES)),key="-CURRENTZ-")
    ],
    [
        sg.Button("home", key="-HOME-")],
    [
        sg.Button("left", key="-XLEFT-"), 
        sg.Text("X-axis"),
        sg.Button("right", key="-XRIGHT-"), 
    ],
    [
        sg.Button("left", key="-YLEFT-"), 
        sg.Text("Y-axis"),
        sg.Button("right", key="-YRIGHT-"), 
    ],
    [
        sg.Button("left", key="-ZLEFT-"), 
        sg.Text("Z-axis"),
        sg.Button("right", key="-ZRIGHT-"), 
    ],
    
    ]

    window = sg.Window('Zaber GUI', layout, size = (300,300), element_justification='c')

    while True:
        event, values = window.read()
        
        if event == "Exit" or event == sg.WIN_CLOSED:
            break

        if event == "-XRIGHT-":
            if (is_in_bounds_r(axis1)):
                axis1.move_relative(DIST, Units.LENGTH_MILLIMETRES)
            else:
                axis1.move_absolute(MAX_X, Units.LENGTH_MILLIMETRES)

        if event == "-XLEFT-":
            if is_in_bounds_l(axis1):
                axis1.move_relative(-DIST, Units.LENGTH_MILLIMETRES)
            else:
                axis1.move_absolute(0)
            
        if event == "-YRIGHT-":
            if (is_in_bounds_r(axis2)):
                axis2.move_relative(DIST, Units.LENGTH_MILLIMETRES)
            else:
                axis2.move_absolute(MAX_Y, Units.LENGTH_MILLIMETRES)

        if event == "-YLEFT-":
            if is_in_bounds_l(axis2):
                axis2.move_relative(-DIST, Units.LENGTH_MILLIMETRES)
            else:
                axis2.move_absolute(0)
        
        if event == "-ZRIGHT-":
            if (is_in_bounds_r(axis3)):
                axis3.move_relative(DIST, Units.LENGTH_MILLIMETRES)
            else:
                axis3.move_absolute(MAX_Z, Units.LENGTH_MILLIMETRES)

        if event == "-ZLEFT-":
            if is_in_bounds_l(axis3):
                axis3.move_relative(-DIST, Units.LENGTH_MILLIMETRES)
            else:
                axis3.move_absolute(0)
        
        if event == "-HOME-":
            home_all()
        window["-CURRENTX-"].update("{:.2f} mm".format(axis1.get_position(Units.LENGTH_MILLIMETRES)))
        window["-CURRENTY-"].update("{:.2f} mm".format(axis2.get_position(Units.LENGTH_MILLIMETRES)))
        window["-CURRENTZ-"].update("{:.2f} mm".format(axis3.get_position(Units.LENGTH_MILLIMETRES)))